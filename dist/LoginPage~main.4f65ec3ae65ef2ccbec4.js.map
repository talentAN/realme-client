{"version":3,"sources":["webpack:///./src/pages/Login.tsx"],"names":["MD5","default","User","user","setUser","setDiaLog","classes","makeStyles","theme","account","setUsername","password","setPassword","isGuest","component","maxWidth","className","paper","Logo","variant","form","noValidate","method","margin","required","fullWidth","id","label","name","autoComplete","value","onChange","e","target","autoFocus","type","root","hover","submit","onClick","open","content","onConfirm","login","hash","then","data","container","item","xs","customGrid","Link","to","route","ABOUT","link","ROOT","Redirect"],"mappings":"0YAAA,mBACA,YACA,YACA,eACA,eACA,eACA,eACA,eACA,eACA,YACA,YACA,eACA,YACA,eAEMA,EAAM,EAAQ,QAAUC,QA0G9B,UAxGwB,WACf,IAAAC,EAAA,+BAAAA,KACD,8BAACC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,QAASC,EAAA,EAAAA,UAChBC,EAAU,EAAAC,YAAW,SAAAC,GAAS,iBAAcA,KAAlC,GACV,iBAACC,EAAA,KAASC,EAAA,KACV,iBAACC,EAAA,KAAUC,EAAA,KA8BjB,OAAK,EAAAC,QAAQV,GAIX,wBAAC,UAAS,CAACW,UAAU,OAAOC,SAAS,MACnC,wBAAC,UAAW,MACZ,+BAAKC,UAAWV,EAAQW,OACtB,+BAAKD,UAAWV,EAAQY,OACxB,wBAAC,UAAU,CAACJ,UAAU,KAAKK,QAAQ,MAAI,UAGvC,gCAAMH,UAAWV,EAAQc,KAAMC,YAAU,EAACC,OAAO,QAC/C,wBAAC,UAAS,CACRH,QAAQ,WACRI,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTC,GAAG,QACHC,MAAM,MACNC,KAAK,WACLC,aAAa,QACbC,MAAOrB,EACPsB,SAAU,SAAAC,GACRtB,EAAYsB,EAAEC,OAAOH,QAEvBI,WAAS,IAEX,wBAAC,UAAS,CACRf,QAAQ,WACRI,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTG,KAAK,WACLD,MAAM,KACNQ,KAAK,WACLT,GAAG,WACHI,MAAOnB,EACPoB,SAAU,SAAAC,GACRpB,EAAYoB,EAAEC,OAAOH,QAEvBD,aAAa,qBAEf,wBAAC,UAAM,CACLvB,QAAS,CAAC8B,KAAM9B,EAAQ+B,OACxBZ,WAAS,EACTN,QAAQ,YACRH,UAAWV,EAAQgC,OACnBC,QAvEM,WAHK,KAAZ9B,GAA8B,UAAZA,GAAoC,KAAbE,EAK9CN,EAAU,CACRmC,MAAM,EACNC,QAAS,aACTC,UAAW,OAGbxC,EAAKyC,MAAM,CAAClC,QAAO,EAAEE,SAAUX,EAAI4C,KAAKjC,KAAYkC,MAAK,SAACC,GACpDA,EACF1C,EAAQ0C,GAERzC,EAAU,CACRmC,MAAM,EACNC,QAAS,kBACTC,UAAW,WACT9B,EAAY,YAuDE,MAIlB,wBAAC,UAAI,CAACmC,WAAS,GACb,wBAAC,UAAI,CAACC,MAAI,EAACC,IAAE,EAAC3C,QAAS,CAAC8B,KAAM9B,EAAQ4C,aACpC,wBAAC,EAAAC,KAAI,CAACC,GAAIC,EAAMC,MAAOtC,UAAWV,EAAQiD,MAAI,cAIhD,wBAAC,UAAI,CAACP,MAAI,GACR,wBAAC,EAAAG,KAAI,CAACC,GAAIC,EAAMG,KAAMxC,UAAWV,EAAQiD,MAAI,cAzDhD,wBAAC,EAAAE,SAAQ,CAACL,GAAIC,EAAMG","file":"LoginPage~main.4f65ec3ae65ef2ccbec4.js","sourcesContent":["import React, {useContext, useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Redirect, Link} from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport {rootContext} from '../contexts/RootContext';\nimport {requestContext} from '../contexts/request';\nimport * as route from '../utils/consts/Route';\nimport {isGuest} from '../utils/helpers/user';\nimport genLoginStyle from './Login.style';\n\nconst MD5 = require('md5-es').default;\n\nconst Login: React.FC = () => {\n  const {User} = useContext(requestContext);\n  const {user, setUser, setDiaLog} = useContext(rootContext);\n  const classes = makeStyles(theme => genLoginStyle(theme) as any)() as any;\n  const [account, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const _checkLoginNotValid = (): boolean => {\n    return account === '' || account === 'guest' || password === '';\n  };\n\n  const onLogin = () => {\n    if (_checkLoginNotValid()) {\n      setDiaLog({\n        open: true,\n        content: '用户名和密码不能为空',\n        onConfirm: null,\n      });\n    } else {\n      User.login({account, password: MD5.hash(password)}).then((data: any) => {\n        if (data) {\n          setUser(data);\n        } else {\n          setDiaLog({\n            open: true,\n            content: '用户名和密码不匹配，请重新登陆',\n            onConfirm: () => {\n              setPassword('');\n            },\n          });\n        }\n      });\n    }\n  };\n\n  if (!isGuest(user)) {\n    return <Redirect to={route.ROOT} />;\n  }\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <div className={classes.Logo}></div>\n        <Typography component=\"h1\" variant=\"h5\">\n          LifLib\n        </Typography>\n        <form className={classes.form} noValidate method=\"post\">\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"用户名\"\n            name=\"username\"\n            autoComplete=\"email\"\n            value={account}\n            onChange={e => {\n              setUsername(e.target.value);\n            }}\n            autoFocus\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"密码\"\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            onChange={e => {\n              setPassword(e.target.value);\n            }}\n            autoComplete=\"current-password\"\n          />\n          <Button\n            classes={{root: classes.hover}}\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            onClick={onLogin}\n          >\n            登陆\n          </Button>\n          <Grid container>\n            <Grid item xs classes={{root: classes.customGrid}}>\n              <Link to={route.ABOUT} className={classes.link}>\n                千万不要忘记密码！\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link to={route.ROOT} className={classes.link}>\n                没有账户?\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n};\n\nexport default Login;\n"],"sourceRoot":""}