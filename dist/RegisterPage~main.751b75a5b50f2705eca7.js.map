{"version":3,"sources":["webpack:///./src/pages/Register.tsx"],"names":["MD5","default","setDiaLog","user","User","id","classes","makeStyles","theme","account","setAccount","password","setPassword","pwdConfirm","setPwdConfirm","Redirect","to","route","ROOT","component","maxWidth","className","paper","Logo","variant","form","noValidate","method","margin","required","fullWidth","label","name","autoComplete","value","onChange","e","target","autoFocus","type","root","hover","submit","onClick","open","content","onConfirm","register","hash","then","data","status","window","location","pathname","LOGIN","container","item","xs","Link","ABOUT","link"],"mappings":"0YAAA,mBACA,YACA,YACA,YACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,YACA,eACMA,EAAM,EAAQ,QAAUC,QAkI9B,UAhI2B,WACnB,kCAACC,EAAA,EAAAA,UAAWC,EAAA,EAAAA,KACXC,EAAA,+BAAAA,KACAC,EAAA,EAAAA,GACDC,EAAU,EAAAC,YAAW,SAAAC,GAAS,iBAAcA,KAAlC,GACV,iBAACC,EAAA,KAASC,EAAA,KACV,iBAACC,EAAA,KAAUC,EAAA,KACX,iBAACC,EAAA,KAAYC,EAAA,KAoCnB,MAAW,UAAPT,EACK,wBAAC,EAAAU,SAAQ,CAACC,GAAIC,EAAMC,OAI3B,wBAAC,UAAS,CAACC,UAAU,OAAOC,SAAS,MACnC,wBAAC,UAAW,MACZ,+BAAKC,UAAWf,EAAQgB,OACtB,+BAAKD,UAAWf,EAAQiB,OACxB,wBAAC,UAAU,CAACJ,UAAU,KAAKK,QAAQ,MAAI,UAGvC,gCAAMH,UAAWf,EAAQmB,KAAMC,YAAU,EAACC,OAAO,QAC/C,wBAAC,UAAS,CACRH,QAAQ,WACRI,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTzB,GAAG,WACH0B,MAAM,MACNC,KAAK,WACLC,aAAa,WACbC,MAAOzB,EACP0B,SAAU,SAAAC,GACR1B,EAAW0B,EAAEC,OAAOH,QAEtBI,WAAS,IAEX,wBAAC,UAAS,CACRd,QAAQ,WACRI,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTE,KAAK,WACLD,MAAM,KACNQ,KAAK,WACLlC,GAAG,WACH6B,MAAOvB,EACPwB,SAAU,SAAAC,GACRxB,EAAYwB,EAAEC,OAAOH,QAEvBD,aAAa,qBAEf,wBAAC,UAAS,CACRT,QAAQ,WACRI,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTE,KAAK,aACLD,MAAM,OACNQ,KAAK,WACLlC,GAAG,aACH6B,MAAOrB,EACPsB,SAAU,SAAAC,GACRtB,EAAcsB,EAAEC,OAAOH,QAEzBD,aAAa,qBAEf,wBAAC,UAAM,CACL3B,QAAS,CAACkC,KAAMlC,EAAQmC,OACxBX,WAAS,EACTN,QAAQ,YACRH,UAAWf,EAAQoC,OACnBC,QA7FS,WAHE,KAAZlC,GAA8B,UAAZA,GAAoC,KAAbE,GAAmBE,IAAeF,EAKhFT,EAAU,CACR0C,MAAM,EACNC,QAAS,0BACTC,UAAW,OAGb1C,EAAK2C,SAAS,CAACtC,QAAO,EAAEE,SAAUX,EAAIgD,KAAKrC,KAAYsC,MAAK,SAACC,GACvC,YAAhBA,EAAKC,OACPjD,EAAU,CACR0C,MAAM,EACNC,QAAS,YACTC,UAAW,WACTM,OAAOC,SAASC,SAAWrC,EAAMsC,SAIrCrD,EAAU,CACR0C,MAAM,EACNC,QAAS,mBACTC,UAAW,WACTpC,EAAW,YAuEM,MAIrB,wBAAC,UAAI,CAAC8C,WAAS,GACb,wBAAC,UAAI,CAACC,MAAI,EAACC,IAAE,GACX,wBAAC,EAAAC,KAAI,CAAC3C,GAAIC,EAAM2C,MAAOvC,UAAWf,EAAQuD,MAAI,cAIhD,wBAAC,UAAI,CAACJ,MAAI,GACR,wBAAC,EAAAE,KAAI,CAAC3C,GAAIC,EAAMsC,MAAOlC,UAAWf,EAAQuD,MAAI","file":"RegisterPage~main.751b75a5b50f2705eca7.js","sourcesContent":["import React, {useContext, useState} from 'react';\nimport {rootContext} from '../contexts/RootContext';\nimport {requestContext} from '../contexts/request';\nimport {Redirect, Link} from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport genLoginStyle from './Login.style';\nimport {makeStyles} from '@material-ui/core/styles';\nimport * as route from '../utils/consts/Route';\nconst MD5 = require('md5-es').default;\n\nconst Register: React.FC = () => {\n  const {setDiaLog, user} = useContext(rootContext);\n  const {User} = useContext(requestContext);\n  const {id} = user;\n  const classes = makeStyles(theme => genLoginStyle(theme) as any)() as any;\n  const [account, setAccount] = useState('');\n  const [password, setPassword] = useState('');\n  const [pwdConfirm, setPwdConfirm] = useState('');\n\n  const checkRegisterNotValid = (): boolean => {\n    return account === '' || account === 'guest' || password === '' || pwdConfirm !== password;\n  };\n\n  const onRegister = () => {\n    if (checkRegisterNotValid()) {\n      setDiaLog({\n        open: true,\n        content: '用户名和密码不能为空, 且两次密码输入必须相同',\n        onConfirm: null,\n      });\n    } else {\n      User.register({account, password: MD5.hash(password)}).then((data: any) => {\n        if (data.status === 'success') {\n          setDiaLog({\n            open: true,\n            content: '注册成功, 请登录',\n            onConfirm: () => {\n              window.location.pathname = route.LOGIN;\n            },\n          });\n        } else {\n          setDiaLog({\n            open: true,\n            content: '注册失败，用户名重复，请重新注册',\n            onConfirm: () => {\n              setAccount('');\n            },\n          });\n        }\n      });\n    }\n  };\n\n  if (id !== 'guest') {\n    return <Redirect to={route.ROOT} />;\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <div className={classes.Logo}></div>\n        <Typography component=\"h1\" variant=\"h5\">\n          LifLib\n        </Typography>\n        <form className={classes.form} noValidate method=\"post\">\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"username\"\n            label=\"用户名\"\n            name=\"username\"\n            autoComplete=\"username\"\n            value={account}\n            onChange={e => {\n              setAccount(e.target.value);\n            }}\n            autoFocus\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"密码\"\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            onChange={e => {\n              setPassword(e.target.value);\n            }}\n            autoComplete=\"current-password\"\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"pwdConfirm\"\n            label=\"确认密码\"\n            type=\"password\"\n            id=\"pwdConfirm\"\n            value={pwdConfirm}\n            onChange={e => {\n              setPwdConfirm(e.target.value);\n            }}\n            autoComplete=\"current-password\"\n          />\n          <Button\n            classes={{root: classes.hover}}\n            fullWidth\n            variant=\"contained\"\n            className={classes.submit}\n            onClick={onRegister}\n          >\n            注册\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link to={route.ABOUT} className={classes.link}>\n                千万不要忘记密码！\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link to={route.LOGIN} className={classes.link}>\n                返回登陆\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n};\n\nexport default Register;\n"],"sourceRoot":""}